IAM: Users and Groups
- IAM = Identity and Access Management, Global service
- Root account: created by default, should't be used or shared
- Users: are people within your organization, and can be grouped
- Groups: only contain users, not other groups
- Users don't have to belong to a group, and user can belong to multiple groups

IAM: permissions
- Users or Groups can be assigned JSON documents called policies
- These policies define the permissions of the users
- In AWS you apply the least privilege principle: don't give more permissions than a user needs

IAM Policies Structure
- Consists of
  * Version: policy language version, always include "2012-10-17"
  * Id: an identifier for the policy (optional)
  * Statement: one or more individual statements (required)
- Statements consists of
  * Sid: an identifier for the statement (optional)
  * Effect: whether the statement allows or denies access (Allow, Deny)
  * Principle: account/user/role to which this policy applied to
  * Action: list of actions this policy allows or denies
  * Resoure: list of resources to which the actions applied to
  * Condition: conditions for when this policy is in effect (optional)

IAM: Password Policy
- Strong passwords = higher security for your account
- In AWS, you can setup a password policy:
  * Set a minimum password length
  * Require specific character types:
    * including uppercase letters
    * lowercase letters
    * numbers
    * non-alphanumric characters
  * Allow all IAM users to change their own passwords
  * Require users to change their password after some time (password expiration)
  * Prevent password re-use

Multi Factor Authentication - MFA
- Users have access to your account and can possibly change configurations or delete resources in your AWS account
- You want to protect your Root Accounts and IAM users
- MFA = password + security device you own
- Main benefit of MFA: if a password is stolen or hacked, the account is not compromised

AWS CLI
- A tool that enables you to interact with AWS services using commands in your command-line shell
- Direct access to the public APIs of AWS services
- You can develop scripts to manage your resources
- It's open-source
- Alternative to using AWS Management console

AWS SDK
- AWS Software Development Kit (AWS SDK)
- Language-specific APIs (set of libraries)
- Enables you to access and manage AWS services programmatically
- Embedded within your application
- Supports
  * SDKs (JS, Python, PHP, .NET, Ruby, Java, GO, NodeJS, C++)
  * Mobile SDKs (Android, iOS, ...)
  * IoT Device SDKs (Embedded C, Andruino, ...)

IAM Roles for services
- Some AWS service will need to perform actions on your behalf
- To do so, we will assign permissions to AWS services with IAM Roles
- Common roles:
  * EC2 instance Roles
  * Lambda Function Roles
  * Roles for CloudFormation

IAM Security Tools
- IAM Credentials Report (account-level): a report that lists all your account's users and the status of their various credentials
- IAM Access Advisor (user-level): Access advisor shows the service permissions granted to a user and when those services were last accessed.
You can use this information to revise your policies